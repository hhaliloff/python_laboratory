import json

def get_lr(root, height, right = lambda l_r: l_r*3, left = lambda r_r: r_r+4) -> dict:
    """
    получает на вход корень дерева и высоту дерева
    возвращает дерево с заданными параметрами без корня(сразу же две ветки)

    > get_lr(3, 2)
    {9: {27: {}, 13: {}}, 7: {21: {}, 11: {}}}

    """
    rootl = right(root)
    rootr = left(root)
    if height == 0:
        return {}
    else:
        return {rootl: get_lr(rootl, height-1, right, left), rootr: get_lr(rootr, height-1, right, left)}

def gen_bin_tree(root, height, right = lambda l_r: l_r*3, left = lambda r_r: r_r+4) -> dict:
    """
    получает на вход корень дерева и высоту дерева
    возвращает полное дерево с заданными параметрами вместе с изначальным корнем (root)

    > gen_bin_tree(3, 2)
    {3: {9: {27: {}, 13: {}}, 7: {21: {}, 11: {}}}}

    """
    tree = {root: get_lr(root, height, right, left)}
    return tree

def main() -> json:
    """
    не получает на вход ничего
    возвращает дерево с заданными параметрами в формате json, либо,
    если параметры не заданы, возвращает дерево с дефолтными параметрами(root = 2, height = 6) также в формате json

    > main()
    input = (1, 4)
    {
      "1": {
        "3": {
          "9": {
            "27": {},
            "13": {}
          },
          "7": {
            "21": {},
            "11": {}
          }
        },
        "5": {
          "15": {
            "45": {},
            "19": {}
          },
          "9": {
            "27": {},
            "13": {}
          }
        }
      }
    }

    > main()
    input = ("", "")
    {
      "2": {
        "6": {
          "18": {
            "54": {
              "162": {
                "486": {
                  "1458": {},
                  "490": {}
                },
                "166": {
                  "498": {},
                  "170": {}
                }
              },
              "58": {
                "174": {
                  "522": {},
                  "178": {}
                },
                "62": {
                  "186": {},
                  "66": {}
                }
              }
            },
            "22": {
              "66": {
                "198": {
                  "594": {},
                  "202": {}
                },
                "70": {
                  "210": {},
                  "74": {}
                }
              },
              "26": {
                "78": {
                  "234": {},
                  "82": {}
                },
                "30": {
                  "90": {},
                  "34": {}
                }
              }
            }
          },
          "10": {
            "30": {
              "90": {
                "270": {
                  "810": {},
                  "274": {}
                },
                "94": {
                  "282": {},
                  "98": {}
                }
              },
              "34": {
                "102": {
                  "306": {},
                  "106": {}
                },
                "38": {
                  "114": {},
                  "42": {}
                }
              }
            },
            "14": {
              "42": {
                "126": {
                  "378": {},
                  "130": {}
                },
                "46": {
                  "138": {},
                  "50": {}
                }
              },
              "18": {
                "54": {
                  "162": {},
                  "58": {}
                },
                "22": {
                  "66": {},
                  "26": {}
                }
              }
            }
          }
        }
      }
    }
    """
    root = str(input("Введите корень дерева(оставьте поле пустым чтобы оставить дефолтное значение): "))
    height = str(input("Введите высоту дерева(оставьте поле пустым чтобы оставить дефолтное значение): "))
    if root == "" or height == "":
        return json.dumps(gen_bin_tree(2, 6), indent=2)
    else:
        return json.dumps(gen_bin_tree(int(root), int(height)), indent=2)

#print(main())